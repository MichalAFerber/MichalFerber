<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-07-10T13:32:43-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Michal Ferber</title><subtitle>I turn coffee &lt;img class=&quot;icon&quot; src=&quot;/assets/img/coffee.jpg&quot; alt=&quot;Coffee&quot;&gt; and Mountain Dew &lt;img class=&quot;icon&quot; src=&quot;/assets/img/mountain-dew.jpg&quot; alt=&quot;Mountain Dew&quot;&gt; into code, use tabs over spaces and never brake production.</subtitle><author><name>Michal Ferber</name><email>michal@michalferber.me</email></author><entry><title type="html">How to Remove and Exclude .DS_Store Files on macOS with Git</title><link href="http://localhost:4000/blog/remove-and-exclude-ds_store-files-on-macos-with-git" rel="alternate" type="text/html" title="How to Remove and Exclude .DS_Store Files on macOS with Git" /><published>2025-07-10T00:00:00-04:00</published><updated>2025-07-10T00:00:00-04:00</updated><id>http://localhost:4000/blog/remove-and-exclude-ds_store-files-on-macos-with-git</id><content type="html" xml:base="http://localhost:4000/blog/remove-and-exclude-ds_store-files-on-macos-with-git"><![CDATA[<p><img src="/assets/img/gitignore.png" alt=".gitignore" /></p>

<p>If you’re a macOS user working with Git, you’ve likely encountered <code class="language-plaintext highlighter-rouge">.DS_Store</code> files. These hidden files, created by Finder to store folder-specific metadata, can sneak into your Git repository and clutter your commits. In this post, I’ll guide you through the steps to remove existing <code class="language-plaintext highlighter-rouge">.DS_Store</code> files from your repository and prevent them from being tracked in the future.</p>

<h2 id="why-ds_store-files-are-a-problem">Why <code class="language-plaintext highlighter-rouge">.DS_Store</code> Files Are a Problem</h2>

<p><code class="language-plaintext highlighter-rouge">.DS_Store</code> files are automatically generated by macOS to store information like folder view settings. While harmless locally, they can cause issues in Git repositories:</p>

<ul>
  <li>They bloat commit history with irrelevant changes.</li>
  <li>They can lead to merge conflicts if different team members modify folder settings.</li>
  <li>They expose macOS-specific metadata in shared repositories.</li>
</ul>

<p>Let’s dive into how to handle them effectively.</p>

<h2 id="step-1-remove-existing-ds_store-files-from-git">Step 1: Remove Existing <code class="language-plaintext highlighter-rouge">.DS_Store</code> Files from Git</h2>

<p>If <code class="language-plaintext highlighter-rouge">.DS_Store</code> files are already tracked in your repository, you’ll need to remove them from Git’s index without deleting them from your local filesystem (unless you want to).</p>

<ol>
  <li>
    <p><strong>Check for tracked <code class="language-plaintext highlighter-rouge">.DS_Store</code> files</strong>:
Run the following command in your repository’s root directory to see if any <code class="language-plaintext highlighter-rouge">.DS_Store</code> files are tracked:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git ls-files | <span class="nb">grep</span> .DS_Store
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Remove <code class="language-plaintext highlighter-rouge">.DS_Store</code> files from the Git index</strong>:
Use this command to untrack all <code class="language-plaintext highlighter-rouge">.DS_Store</code> files while keeping them on your disk:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="nb">.</span> <span class="nt">-name</span> .DS_Store <span class="nt">-exec</span> git <span class="nb">rm</span> <span class="nt">--cached</span> <span class="o">{}</span> <span class="se">\;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>(Optional) Delete <code class="language-plaintext highlighter-rouge">.DS_Store</code> files from the filesystem</strong>:
If you want to remove <code class="language-plaintext highlighter-rouge">.DS_Store</code> files entirely from your local repository, run:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="nb">.</span> <span class="nt">-name</span> .DS_Store <span class="nt">-delete</span>
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="step-2-exclude-ds_store-files-in-git">Step 2: Exclude <code class="language-plaintext highlighter-rouge">.DS_Store</code> Files in Git</h2>

<p>To prevent <code class="language-plaintext highlighter-rouge">.DS_Store</code> files from being tracked in the future, add them to your <code class="language-plaintext highlighter-rouge">.gitignore</code> file.</p>

<ol>
  <li>
    <p><strong>Add <code class="language-plaintext highlighter-rouge">.DS_Store</code> to <code class="language-plaintext highlighter-rouge">.gitignore</code></strong>:
Open or create a <code class="language-plaintext highlighter-rouge">.gitignore</code> file in your repository’s root directory and add the following line:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.DS_Store
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>(Optional) Set up a global <code class="language-plaintext highlighter-rouge">.gitignore</code></strong>:
If you work across multiple repositories, you can ignore <code class="language-plaintext highlighter-rouge">.DS_Store</code> globally:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">".DS_Store"</span> <span class="o">&gt;&gt;</span> ~/.gitignore_global
git config <span class="nt">--global</span> core.excludesfile ~/.gitignore_global
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Verify <code class="language-plaintext highlighter-rouge">.gitignore</code></strong>:
Double-check that <code class="language-plaintext highlighter-rouge">.DS_Store</code> is listed in your <code class="language-plaintext highlighter-rouge">.gitignore</code> file to ensure Git ignores it moving forward.</p>
  </li>
</ol>

<h2 id="step-3-prevent-macos-from-creating-ds_store-files-optional">Step 3: Prevent macOS from Creating <code class="language-plaintext highlighter-rouge">.DS_Store</code> Files (Optional)</h2>

<p>You can configure macOS to stop creating <code class="language-plaintext highlighter-rouge">.DS_Store</code> files in specific contexts, such as network or USB drives.</p>

<ol>
  <li>
    <p><strong>Disable <code class="language-plaintext highlighter-rouge">.DS_Store</code> creation on network drives</strong>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defaults write com.apple.desktopservices DSDontWriteNetworkStores <span class="nt">-bool</span> <span class="nb">true</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Disable <code class="language-plaintext highlighter-rouge">.DS_Store</code> creation on USB drives</strong>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defaults write com.apple.desktopservices DSDontWriteUSBStores <span class="nt">-bool</span> <span class="nb">true</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Revert these settings (if needed)</strong>:
To re-enable <code class="language-plaintext highlighter-rouge">.DS_Store</code> creation, use:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defaults delete com.apple.desktopservices DSDontWriteNetworkStores
defaults delete com.apple.desktopservices DSDontWriteUSBStores
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="step-4-commit-and-push-changes">Step 4: Commit and Push Changes</h2>

<p>After removing <code class="language-plaintext highlighter-rouge">.DS_Store</code> files and updating <code class="language-plaintext highlighter-rouge">.gitignore</code>, commit your changes:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add .gitignore
git commit <span class="nt">-m</span> <span class="s2">"Remove .DS_Store files and update .gitignore"</span>
</code></pre></div></div>

<p>If you’re working with a remote repository, push the changes:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push origin &lt;branch-name&gt;
</code></pre></div></div>

<h2 id="final-thoughts">Final Thoughts</h2>

<p>By following these steps, you can keep your Git repository clean from <code class="language-plaintext highlighter-rouge">.DS_Store</code> files and avoid future headaches. Regularly check your <code class="language-plaintext highlighter-rouge">.gitignore</code> file to ensure it’s up to date, especially when collaborating with others on macOS.</p>]]></content><author><name>Michal Ferber</name><email>michal@michalferber.me</email></author><category term="Git" /><category term="macOS" /><category term="How To" /><category term="Programming" /><summary type="html"><![CDATA[Learn how to remove and exclude .DS_Store files from Git on macOS to keep your repository clean. Step-by-step guide!]]></summary></entry><entry><title type="html">Configure mDNS for Hostname Resolution on Ubuntu</title><link href="http://localhost:4000/blog/configure-dns-for-hostname-on-ubuntu" rel="alternate" type="text/html" title="Configure mDNS for Hostname Resolution on Ubuntu" /><published>2025-07-09T00:00:00-04:00</published><updated>2025-07-09T00:00:00-04:00</updated><id>http://localhost:4000/blog/configure-dns-for-hostname-on-ubuntu</id><content type="html" xml:base="http://localhost:4000/blog/configure-dns-for-hostname-on-ubuntu"><![CDATA[<p><img src="/assets/img/systemctl_status_avahi-daemon.png" alt="avahi-daemon" /></p>

<p>Enable your Ubuntu servers to be accessed via <code class="language-plaintext highlighter-rouge">hostname.local</code> (e.g., <code class="language-plaintext highlighter-rouge">ping yourservername.local</code> or <code class="language-plaintext highlighter-rouge">ssh username@yourservername.local</code>) using Avahi for Zero Configuration Networking (Zeroconf). This is perfect for local networks, like my setup with pi5server, pi4server, and pi3server.</p>

<h2 id="install-avahi">Install Avahi</h2>

<p>Install the mDNS daemon and tools:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>avahi-daemon avahi-utils libnss-mdns
</code></pre></div></div>

<ul>
  <li><strong>avahi-daemon</strong>: Handles mDNS and service discovery.</li>
  <li><strong>avahi-utils</strong>: Provides tools like avahi-browse.</li>
  <li><strong>libnss-mdns</strong>: Enables .local resolution in the system.</li>
</ul>

<h2 id="verify-avahi-service">Verify Avahi Service</h2>

<p>Ensure Avahi is running:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl <span class="nb">enable </span>avahi-daemon
<span class="nb">sudo </span>systemctl start avahi-daemon
<span class="nb">sudo </span>systemctl status avahi-daemon
</code></pre></div></div>

<p>Look for <code class="language-plaintext highlighter-rouge">active (running)</code> in the output.</p>

<h2 id="configure-hostname">Configure Hostname</h2>

<p>Set a unique hostname for each server:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>hostnamectl set-hostname yourservername  <span class="c"># Replace with your hostname</span>
</code></pre></div></div>

<p>Update /etc/hosts to include the hostname:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nano /etc/hosts
</code></pre></div></div>

<p>Add or verify:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1 localhost
127.0.1.1 yourservername  <span class="c"># Replace with your hostname</span>
</code></pre></div></div>

<p>Save and exit (<code class="language-plaintext highlighter-rouge">Ctrl+O</code>, <code class="language-plaintext highlighter-rouge">Enter</code>, <code class="language-plaintext highlighter-rouge">Ctrl+X</code>).</p>

<h2 id="advertise-ssh-service">Advertise SSH Service</h2>

<p>Allow SSH discovery via mDNS:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nano /etc/avahi/services/ssh.service
</code></pre></div></div>

<p>Add:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?xml <span class="nv">version</span><span class="o">=</span><span class="s2">"1.0"</span> <span class="nv">standalone</span><span class="o">=</span><span class="s1">'no'</span>?&gt;
&lt;<span class="o">!</span>DOCTYPE service-group SYSTEM <span class="s2">"avahi-service.dtd"</span><span class="o">&gt;</span>
&lt;service-group&gt;
    &lt;name replace-wildcards<span class="o">=</span><span class="s2">"yes"</span><span class="o">&gt;</span>%h&lt;/name&gt;
    &lt;service&gt;
        &lt;<span class="nb">type</span><span class="o">&gt;</span>_ssh._tcp&lt;/type&gt;
        &lt;port&gt;22&lt;/port&gt;
    &lt;/service&gt;
&lt;/service-group&gt;
</code></pre></div></div>

<p>Restart Avahi:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl restart avahi-daemon
</code></pre></div></div>

<h2 id="configure-client-for-mdns">Configure Client for mDNS</h2>

<p>On the client device accessing the server:</p>

<ul>
  <li><strong>Linux (Ubuntu, etc.)</strong>: Install <code class="language-plaintext highlighter-rouge">libnss-mdns</code>:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>libnss-mdns
</code></pre></div></div>

<p>Edit <code class="language-plaintext highlighter-rouge">/etc/nsswitch.conf</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nano /etc/nsswitch.conf
</code></pre></div></div>

<p>Ensure the <code class="language-plaintext highlighter-rouge">hosts</code> line includes:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hosts: files mdns4_minimal <span class="o">[</span><span class="nv">NOTFOUND</span><span class="o">=</span><span class="k">return</span><span class="o">]</span> resolve <span class="o">[!</span><span class="nv">UNAVAIL</span><span class="o">=</span><span class="k">return</span><span class="o">]</span> dns
</code></pre></div></div>

<ul>
  <li><strong>macOS</strong>: Built-in Bonjour support, no action needed.</li>
  <li><strong>Windows</strong>: Install Bonjour (via iTunes or standalone) or use an mDNS-capable SSH client like Termius.</li>
  <li><strong>iOS/Android</strong>: Use an mDNS-capable SSH app like Termius.</li>
</ul>

<h2 id="test-mdns-resolution">Test mDNS Resolution</h2>

<p>From a client on the same network (e.g., <code class="language-plaintext highlighter-rouge">192.168.x.x</code>):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ping yourservername.local
ssh &lt;username@yourservername.local&gt;
</code></pre></div></div>

<p>Verify services:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>avahi-browse <span class="nt">-a</span>
</code></pre></div></div>

<p>Look for entries like:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+ eth0 IPv4 pi5server <span class="o">[</span><span class="nb">hostname</span><span class="o">]</span> _ssh._tcp <span class="nb">local</span>
</code></pre></div></div>

<h2 id="troubleshooting">Troubleshooting</h2>

<ul>
  <li><strong>Same Subnet</strong>: Ensure client and server are on the same network (e.g., <code class="language-plaintext highlighter-rouge">192.168.x.x</code>).</li>
  <li><strong>Firewall</strong>: Allow mDNS traffic:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ufw allow 5353/udp
</code></pre></div></div>

<ul>
  <li><strong>Resolution Fails</strong>: Check Avahi logs:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>journalctl <span class="nt">-u</span> avahi-daemon
</code></pre></div></div>

<h2 id="-notes">🧠 Notes</h2>

<p>Ensure SSH is enabled (<code class="language-plaintext highlighter-rouge">sudo systemctl enable ssh</code>; <code class="language-plaintext highlighter-rouge">sudo systemctl start ssh</code>).</p>]]></content><author><name>Michal Ferber</name><email>michal@michalferber.me</email></author><category term="Linux" /><category term="How To" /><category term="DNS" /><summary type="html"><![CDATA[Configure Ubuntu for mDNS to ping/SSH using hostname.local (e.g., yourservername.local). Install Avahi, set hostname, and enable SSH discovery.]]></summary></entry><entry><title type="html">Custom Linux Welcome Message Guide</title><link href="http://localhost:4000/blog/custom-linux-welcome-message" rel="alternate" type="text/html" title="Custom Linux Welcome Message Guide" /><published>2025-07-07T00:00:00-04:00</published><updated>2025-07-07T00:00:00-04:00</updated><id>http://localhost:4000/blog/custom-linux-welcome-message</id><content type="html" xml:base="http://localhost:4000/blog/custom-linux-welcome-message"><![CDATA[<p><a href="https://github.com/fastfetch-cli/fastfetch"><img src="/assets/img/fastfetch.png" alt="fastfetch-cli" /></a></p>

<p>This guide walks you through setting up a personalized welcome message that appears when you log into your terminal or connect via SSH.</p>

<p>You’ll get:</p>

<ul>
  <li>A full <code class="language-plaintext highlighter-rouge">fastfetch</code> system overview</li>
  <li>Colored greeting</li>
  <li>Uptime and load average</li>
  <li>Public IP</li>
  <li>Disk usage</li>
  <li>Update check</li>
  <li>Raspberry Pi temperature and throttle status (if applicable)</li>
  <li>Weather for your location</li>
  <li>A custom message (“Whiskey, Tango, Foxtrot!”)</li>
</ul>

<hr />

<h2 id="-step-1-create-the-welcome-script">✅ Step 1: Create the Welcome Script</h2>

<p>Create a new script in your home directory:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano ~/welcome.sh
</code></pre></div></div>

<p>Paste the following code into the file:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
clear
fastfetch

<span class="nv">CYAN</span><span class="o">=</span><span class="s2">"</span><span class="se">\0</span><span class="s2">33[1;36m"</span>
<span class="nv">YELLOW</span><span class="o">=</span><span class="s2">"</span><span class="se">\0</span><span class="s2">33[1;33m"</span>
<span class="nv">GREEN</span><span class="o">=</span><span class="s2">"</span><span class="se">\0</span><span class="s2">33[1;32m"</span>
<span class="nv">RED</span><span class="o">=</span><span class="s2">"</span><span class="se">\0</span><span class="s2">33[1;31m"</span>
<span class="nv">NC</span><span class="o">=</span><span class="s2">"</span><span class="se">\0</span><span class="s2">33[0m"</span> <span class="c"># No Color</span>

<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="k">${</span><span class="nv">CYAN</span><span class="k">}</span><span class="s2">Hello, </span><span class="nv">$USER</span><span class="s2">!</span><span class="k">${</span><span class="nv">NC</span><span class="k">}</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="k">${</span><span class="nv">YELLOW</span><span class="k">}</span><span class="s2">Uptime: </span><span class="si">$(</span><span class="nb">uptime</span> <span class="nt">-p</span><span class="si">)</span><span class="s2"> | Load Average: </span><span class="si">$(</span><span class="nb">cut</span> <span class="nt">-d</span> <span class="s1">' '</span> <span class="nt">-f1-3</span> /proc/loadavg<span class="si">)</span><span class="k">${</span><span class="nv">NC</span><span class="k">}</span><span class="s2">"</span>

<span class="nv">PUBIP</span><span class="o">=</span><span class="si">$(</span>curl <span class="nt">-s</span> ifconfig.me<span class="si">)</span>
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="k">${</span><span class="nv">GREEN</span><span class="k">}</span><span class="s2">Public IP: </span><span class="nv">$PUBIP</span><span class="k">${</span><span class="nv">NC</span><span class="k">}</span><span class="s2">"</span>

<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="k">${</span><span class="nv">CYAN</span><span class="k">}</span><span class="s2">Disk Usage on /:</span><span class="si">$(</span><span class="nb">df</span> <span class="nt">-h</span> / | <span class="nb">awk</span> <span class="s1">'NR==2 {print \" \" \$3 \" used of \" \$2 \" (\" \$5 \")\"}'</span><span class="si">)</span><span class="k">${</span><span class="nv">NC</span><span class="k">}</span><span class="s2">"</span>

<span class="k">if </span><span class="nb">command</span> <span class="nt">-v</span> apt <span class="o">&gt;</span>/dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then
    </span><span class="nv">UPDATES</span><span class="o">=</span><span class="si">$(</span>apt list <span class="nt">--upgradeable</span> 2&gt;/dev/null | <span class="nb">grep</span> <span class="nt">-v</span> <span class="s2">"Listing..."</span> | <span class="nb">wc</span> <span class="nt">-l</span><span class="si">)</span>
    <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$UPDATES</span><span class="s2">"</span> <span class="nt">-gt</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="k">${</span><span class="nv">RED</span><span class="k">}</span><span class="s2">Updates available: </span><span class="nv">$UPDATES</span><span class="s2"> package(s)</span><span class="k">${</span><span class="nv">NC</span><span class="k">}</span><span class="s2">"</span>
    <span class="k">else
        </span><span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="k">${</span><span class="nv">GREEN</span><span class="k">}</span><span class="s2">Your system is up to date.</span><span class="k">${</span><span class="nv">NC</span><span class="k">}</span><span class="s2">"</span>
    <span class="k">fi
fi

if</span> <span class="o">[</span> <span class="nt">-f</span> /var/run/reboot-required <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="k">${</span><span class="nv">RED</span><span class="k">}</span><span class="s2">⚠️  Reboot required!</span><span class="k">${</span><span class="nv">NC</span><span class="k">}</span><span class="s2">"</span>
<span class="k">fi

if </span><span class="nb">command</span> <span class="nt">-v</span> vcgencmd &amp;&gt;/dev/null<span class="p">;</span> <span class="k">then
    </span><span class="nv">TEMP</span><span class="o">=</span><span class="si">$(</span>vcgencmd measure_temp | <span class="nb">cut</span> <span class="nt">-d</span><span class="o">=</span> <span class="nt">-f2</span><span class="si">)</span>
    <span class="nv">THROTTLED_RAW</span><span class="o">=</span><span class="si">$(</span>vcgencmd get_throttled | <span class="nb">cut</span> <span class="nt">-d</span><span class="o">=</span> <span class="nt">-f2</span><span class="si">)</span>
    <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$THROTTLED_RAW</span><span class="s2">"</span> <span class="o">!=</span> <span class="s2">"0x0"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nv">THROTTLE_STATUS</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">RED</span><span class="k">}</span><span class="s2">Yes (</span><span class="nv">$THROTTLED_RAW</span><span class="s2">)</span><span class="k">${</span><span class="nv">NC</span><span class="k">}</span><span class="s2">"</span>
    <span class="k">else
        </span><span class="nv">THROTTLE_STATUS</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">GREEN</span><span class="k">}</span><span class="s2">No</span><span class="k">${</span><span class="nv">NC</span><span class="k">}</span><span class="s2">"</span>
    <span class="k">fi
    </span><span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="k">${</span><span class="nv">CYAN</span><span class="k">}</span><span class="s2">CPU Temp: </span><span class="nv">$TEMP</span><span class="s2"> | Throttled: </span><span class="nv">$THROTTLE_STATUS</span><span class="k">${</span><span class="nv">NC</span><span class="k">}</span><span class="s2">"</span>
<span class="k">fi

</span><span class="nv">WEATHER</span><span class="o">=</span><span class="si">$(</span>curl <span class="nt">-s</span> <span class="s1">'wttr.in/Lake+City?format=3'</span><span class="si">)</span>
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="k">${</span><span class="nv">YELLOW</span><span class="k">}</span><span class="s2">Weather: </span><span class="nv">$WEATHER</span><span class="k">${</span><span class="nv">NC</span><span class="k">}</span><span class="s2">"</span>

<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="k">${</span><span class="nv">YELLOW</span><span class="k">}</span><span class="s2">You are good to go for Whiskey, Tango, Foxtrot!</span><span class="k">${</span><span class="nv">NC</span><span class="k">}</span><span class="s2">"</span>
</code></pre></div></div>

<p>Save and exit the file (<code class="language-plaintext highlighter-rouge">Ctrl+O</code>, <code class="language-plaintext highlighter-rouge">Enter</code>, then <code class="language-plaintext highlighter-rouge">Ctrl+X</code>).
Make it executable:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x ~/welcome.sh
</code></pre></div></div>

<hr />

<h2 id="️-step-2-run-script-on-terminal-login">⚙️ Step 2: Run Script on Terminal Login</h2>

<p>Add it to your shell’s startup config.</p>

<h3 id="-for-zsh-default-on-kali-macos">🔹 For Zsh (default on Kali, macOS)</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="nt">-e</span> <span class="s1">'\nif [ -x "$HOME/welcome.sh" ]; then\n "$HOME/welcome.sh"\nfi'</span> <span class="o">&gt;&gt;</span> ~/.zshrc
</code></pre></div></div>

<h3 id="-for-bash">🔹 For Bash</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="nt">-e</span> <span class="s1">'\nif [ -x "$HOME/welcome.sh" ]; then\n    "$HOME/welcome.sh"\nfi'</span> <span class="o">&gt;&gt;</span> ~/.bashrc
</code></pre></div></div>

<p>Then apply the changes:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> ~/.zshrc   <span class="c"># or ~/.bashrc depending on your shell</span>
</code></pre></div></div>

<hr />

<h2 id="-optional-system-wide-setup-for-all-users">🌍 Optional: System-Wide Setup (for All Users)</h2>

<p>To show the welcome message for every user on the system, copy the script to <code class="language-plaintext highlighter-rouge">/etc/profile.d/</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo cp</span> ~/welcome.sh /etc/profile.d/welcome.sh 
<span class="nb">sudo chmod</span> +x /etc/profile.d/welcome.sh
</code></pre></div></div>

<p>It will run for any interactive login shell across all users.</p>

<hr />

<h2 id="-step-3-install-required-packages">🔌 Step 3: Install Required Packages</h2>

<p>Install the needed tools:</p>

<h3 id="debianubuntukali">Debian/Ubuntu/Kali</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update <span class="nb">sudo </span>apt <span class="nb">install </span>fastfetch curl libraspberrypi-bin
</code></pre></div></div>

<h3 id="fedora">Fedora</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>dnf <span class="nb">install </span>fastfetch curl libraspberrypi-tools
</code></pre></div></div>

<h3 id="arch">Arch</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>pacman <span class="nt">-Sy</span> fastfetch curl raspberrypi-firmware
</code></pre></div></div>

<hr />

<h2 id="-step-4-test-it">🧪 Step 4: Test It</h2>

<p>Simply run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/welcome.sh
</code></pre></div></div>

<p>Or open a new terminal or SSH session to see the welcome message in action.</p>

<hr />

<h2 id="-notes">🧠 Notes</h2>

<ul>
  <li>
    <p>The update check and reboot prompt only work on Debian-based systems.</p>
  </li>
  <li>
    <p>Raspberry Pi-specific temp/throttle requires <code class="language-plaintext highlighter-rouge">vcgencmd</code> (from <code class="language-plaintext highlighter-rouge">libraspberrypi-bin</code>).</p>
  </li>
  <li>
    <p>Change the weather location in the script (<code class="language-plaintext highlighter-rouge">Lake+City</code>) to match your area or use IP-based geolocation.</p>
  </li>
  <li>
    <p>You can customize the colors, messages, or add even more functionality (like Docker container status, CPU graph, etc.).</p>
  </li>
</ul>

<hr />

<h2 id="-result-example">🎉 Result Example</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello, michal!
Uptime: up 3 hours, 2 minutes | Load Average: 0.15 0.10 0.08
Public IP: 75.176.xxx.xxx
Disk Usage on /: 13G used of 58G <span class="o">(</span>22%<span class="o">)</span>
Updates available: 3 package<span class="o">(</span>s<span class="o">)</span>
CPU Temp: 43.8°C | Throttled: No
Weather: Lake City: 🌤 +91°F
You are good to go <span class="k">for </span>Whiskey, Tango, Foxtrot!
</code></pre></div></div>

<p><img src="/assets/img/welcome-message.png" alt="Screenshot" /></p>

<hr />

<p>Enjoy your custom login experience, Commander. 🛫</p>]]></content><author><name>Michal Ferber</name><email>michal@michalferber.me</email></author><category term="Linux" /><category term="How To" /><summary type="html"><![CDATA[This guide walks you through setting up a personalized welcome message that appears when you log into your terminal or connect via SSH.]]></summary></entry><entry><title type="html">How to Build a Raspberry Pi Camera for Seamless WebRTC Streaming</title><link href="http://localhost:4000/blog/how-to-build-a-raspberry-pi-camera-for-seamless-webrtc-streaming" rel="alternate" type="text/html" title="How to Build a Raspberry Pi Camera for Seamless WebRTC Streaming" /><published>2024-09-09T00:00:00-04:00</published><updated>2024-09-09T00:00:00-04:00</updated><id>http://localhost:4000/blog/how-to-build-a-raspberry-pi-camera-for-seamless-webrtc-streaming</id><content type="html" xml:base="http://localhost:4000/blog/how-to-build-a-raspberry-pi-camera-for-seamless-webrtc-streaming"><![CDATA[<p><img src="/assets/img/raspberry-pis.jpg" alt="Raspberry Pi models" /></p>

<h2 id="how-to-build-a-raspberry-pi-camera-for-seamless-webrtc-streaming"><strong>How to Build a Raspberry Pi Camera for Seamless WebRTC Streaming</strong></h2>

<p>I recently completed a project using the Pi Zero 2 W and the Camera Module 3. My goal was to stream a live feed from the camera and use WebRTC to integrate it with HTML. After some trial and error, I found MediaMTX to be the best package for WebRTC. I wouldn’t have been able to do this without stumbling upon a helpful Reddit post.</p>

<h2 id="hardware--operating-system">Hardware &amp; Operating System</h2>

<ul>
  <li><strong>Pi Zero 2 W</strong></li>
  <li><strong>Pi Camera Module 3</strong></li>
  <li><strong>Pi 12.5W Micro USB Power Supply</strong></li>
  <li><strong>Pi Zero Case</strong></li>
  <li><strong>SanDisk Extreme PRO SDHC And SDXC UHS-I Card</strong></li>
  <li><strong>Pi OS Lite (32-bit)</strong></li>
</ul>

<h2 id="making-it-all-work">Making it all work</h2>

<ol>
  <li>
    <p><strong>Set up your SD card using Raspberry Pi Imager:</strong></p>

    <ul>
      <li><strong>Device:</strong> Raspberry Pi Zero 2 W</li>
      <li><strong>OS:</strong> Raspberry Pi OS (other) -&gt; Raspberry Pi OS Lite (32-bit) (Bookworm, No GUI)</li>
      <li>Configure settings to set up your user/pass and SSID for Wi-Fi.</li>
    </ul>
  </li>
  <li>
    <p><strong>After the first boot, update your Pi:</strong></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>apt update
 <span class="nb">sudo </span>apt full-upgrade
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Install the libcamera apps (drivers for the camera):</strong></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>apt <span class="nb">install </span>libcamera-apps
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Test to ensure the camera is recognized by the Pi:</strong></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> libcamera-hello <span class="nt">--list-cameras</span>
</code></pre></div>    </div>

    <blockquote>
      <p>You should see output similar to this:</p>
    </blockquote>

    <p><img src="https://i.ibb.co/Lr9gD1j/libcamera-hello.png" alt="image" /></p>
  </li>
  <li>
    <p><strong>Download and uncompress MediaMTX:</strong></p>

    <pre><code class="language-`bash"> wget https://github.com/bluenviron/mediamtx/releases/download/v1.9.0/mediamtx_v1.9.0_linux_armv7.tar.gz
 tar -xvzf mediamtx_v1.9.0_linux_armv7.tar.gz
</code></pre>
  </li>
  <li>
    <p><strong>Remove the LICENSE file (make sure to read it first): (optional)</strong></p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nx">sudo</span> <span class="nx">rm</span> <span class="o">-</span><span class="nx">rf</span> <span class="nx">LICENSE</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Move the files to the correct locations and set permissions:</strong></p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nx">sudo</span> <span class="nx">mv</span> <span class="nx">mediamtx</span> <span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">local</span><span class="o">/</span><span class="nx">bin</span><span class="o">/</span>
 <span class="nx">sudo</span> <span class="nx">mv</span> <span class="nx">mediamtx</span><span class="p">.</span><span class="nx">yml</span> <span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">local</span><span class="o">/</span><span class="nx">etc</span><span class="o">/</span>
 <span class="nx">sudo</span> <span class="nx">chmod</span> <span class="o">+</span><span class="nx">x</span> <span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">local</span><span class="o">/</span><span class="nx">bin</span><span class="o">/</span><span class="nx">mediamtx</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Modify the YAML configuration file:</strong></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>nano /usr/local/etc/mediamtx.yml
</code></pre></div>    </div>

    <p>Scroll to the bottom and add the following under <code class="language-plaintext highlighter-rouge">paths:</code>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> paths:
   cam:
     <span class="nb">source</span>: rpiCamera
</code></pre></div>    </div>

    <p>Ensure proper indentation (2 spaces per level). Save and exit nano (<code class="language-plaintext highlighter-rouge">Ctrl + O</code>, <code class="language-plaintext highlighter-rouge">Ctrl + X</code>).</p>

    <blockquote>
      <p><code class="language-plaintext highlighter-rouge">Optional</code></p>

      <p>I also change <code class="language-plaintext highlighter-rouge">rpiCameraTextOverlayEnable = true</code> and I set a description in the <code class="language-plaintext highlighter-rouge">rpiCameraTextOverlay</code>. These settings are just above the paths in the rpi section. You can refer &gt; to the documentation for this.</p>
    </blockquote>

    <p><a href="https://github.com/bluenviron/mediamtx?tab=readme-ov-file#raspberry-pi-cameras">https://github.com/bluenviron/mediamtx?tab=readme-ov-file#raspberry-pi-cameras</a></p>
  </li>
  <li>
    <p><strong>Set up the service file:</strong></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo tee</span> /etc/systemd/system/mediamtx.service <span class="o">&gt;</span>/dev/null <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
 [Unit]
 Wants=network.target
 [Service]
 ExecStart=/usr/local/bin/mediamtx /usr/local/etc/mediamtx.yml
 [Install]
 WantedBy=multi-user.target
</span><span class="no"> EOF
</span></code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Set up the daemon, enable the service, start the service, and check its status:</strong></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>systemctl daemon-reload
 <span class="nb">sudo </span>systemctl <span class="nb">enable </span>mediamtx
 <span class="nb">sudo </span>systemctl start mediamtx
 <span class="nb">sudo </span>systemctl status mediamtx
</code></pre></div>    </div>

    <blockquote>
      <p>The status output should look something like this:</p>
    </blockquote>

    <p><img src="https://i.ibb.co/WfwyDXc/service-status.png" alt="image" /></p>
  </li>
  <li>
    <p><strong>If you encounter any errors, check the service log file:</strong></p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nx">sudo</span> <span class="nx">journalctl</span> <span class="o">-</span><span class="nx">u</span> <span class="nx">mediamtx</span><span class="p">.</span><span class="nx">service</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Verify everything is working by visiting:</strong></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> http://yourIPaddress:8889/cam
</code></pre></div>    </div>

    <p>You should see a live video feed.</p>

    <p><img src="https://i.ibb.co/NsfJRCs/camera-feed.png" alt="image" /></p>

    <p>Hope this helps!</p>
  </li>
</ol>]]></content><author><name>Michal Ferber</name><email>michal@michalferber.me</email></author><category term="Raspberry Pi" /><category term="Linux" /><category term="How To" /><summary type="html"><![CDATA[Using the Pi Zero 2 W and the Camera Module 3]]></summary></entry><entry><title type="html">The Lord’s Prayer</title><link href="http://localhost:4000/blog/the-lord-s-prayer" rel="alternate" type="text/html" title="The Lord’s Prayer" /><published>2024-08-26T00:00:00-04:00</published><updated>2024-08-26T00:00:00-04:00</updated><id>http://localhost:4000/blog/the-lord-s-prayer</id><content type="html" xml:base="http://localhost:4000/blog/the-lord-s-prayer"><![CDATA[<p><img src="/assets/img/the-lords-prayer.jpg" alt="The Lord's Prayer" /></p>

<p>O Birther! Father-Mother of the Cosmos, you create all that moves in light.</p>

<p>Focus your light within us — make it useful: as the rays of a beacon show the way.</p>

<p>Unite our “I can” to yours, so that we walk as kings and queens with every creature.</p>

<p>Create in me a divine cooperation — from many selves, one voice, one action.</p>

<p>Grant what we need each day in bread and insight: subsistence for the call of growing life.</p>

<p>Forgive our hidden past, the secret shames, as we consistently forgive what others hide.</p>

<p>Deceived neither by the outer nor the inner — free us to walk your path with joy.</p>

<p>From you is born all ruling will, the power and life to do, the song that beautifies all from age to age it renews.</p>

<p>Amen</p>]]></content><author><name>Michal Ferber</name><email>michal@michalferber.me</email></author><category term="Religion" /><category term="Theology" /><category term="God" /><category term="Prayer" /><summary type="html"><![CDATA[["The Aramaic Prayer of Jesus (Original transliteration and translation from the Peshitta (Syriac-Aramaic)"]]]></summary></entry><entry><title type="html">Difference between religion and spirituality</title><link href="http://localhost:4000/blog/difference-between-religion-and-spirituality" rel="alternate" type="text/html" title="Difference between religion and spirituality" /><published>2024-08-05T00:00:00-04:00</published><updated>2024-08-05T00:00:00-04:00</updated><id>http://localhost:4000/blog/difference-between-religion-and-spirituality</id><content type="html" xml:base="http://localhost:4000/blog/difference-between-religion-and-spirituality"><![CDATA[<p><img src="/assets/img/religious-faith.jpg" alt="Religious Faith" /></p>

<p>Once a wise man was asked to explain the difference between religion and spirituality</p>

<p>His response was profound:</p>

<ul>
  <li>Religion is not just one, there are many</li>
  <li>Spirituality is one</li>
  <li>Religion is for those who sleep</li>
  <li>Spirituality is for those who are awake</li>
  <li>Religion is for those who need someone to tell them what to do and who want guidance</li>
  <li>Spirituality is for those who pay attention to their inner voice</li>
  <li>Religion has dogmatic rules</li>
  <li>Spirituality calls us to discuss everything, question everything</li>
  <li>Religion threatens and scares</li>
  <li>Spirituality gives inner peace</li>
  <li>Religion talks about sin and guilt</li>
  <li>Spirituality says “learn from your mistake”</li>
  <li>Religion suppresses everything that is wrong</li>
  <li>Spirituality overcomes everything, it brings you closer to the truth!</li>
  <li>Religion is about God; It is not God</li>
  <li>Spirituality is everything and therefore it is in God</li>
  <li>Religion is inventing</li>
  <li>Spirituality is finding</li>
  <li>Religion doesn’t tolerate any questions</li>
  <li>Spirituality will question everything</li>
  <li>Religion is humanity</li>
  <li>This is an organization whose rules are made by men</li>
  <li>Spirituality is divine, without human rules</li>
  <li>Religion is the cause of division</li>
  <li>Spirituality unites</li>
  <li>Religion seeks you to believe</li>
  <li>The spirituality you have to seek it to believe</li>
  <li>Religion follows the concepts of the holy book</li>
  <li>Spirituality looks for a holiday in all books</li>
  <li>Religion feeds fear</li>
  <li>Spirituality feeds trust and faith</li>
  <li>Religion lives in thoughts</li>
  <li>Spirituality lives in inner consciousness</li>
  <li>Religion is dealing with the performance of rituals</li>
  <li>Spirituality is related to the inner self</li>
  <li>Religion feeds the ego</li>
  <li>Spirituality forces you to go beyond</li>
  <li>Religion makes us disconnect from the world to follow God</li>
  <li>Spirituality makes us live in God, without giving up our existing life</li>
  <li>Religion is a cult</li>
  <li>Spirituality is an inner meditation</li>
  <li>Religion fills us with dreams of glory in paradise</li>
  <li>Spirituality makes us live in earthly glory and paradise</li>
  <li>Religion lives in the past and in the future</li>
  <li>Spirituality is living in the present</li>
  <li>Religion creates monasteries in our memory</li>
  <li>Spirituality frees our consciousness</li>
  <li>Religion makes us believe in eternal life</li>
  <li>Spirituality makes us aware of eternal life</li>
  <li>Religion promises life after death</li>
  <li>Spirituality means finding God inside us in our present life before we die</li>
</ul>

<blockquote>
  <p>We are not human beings who are going through a mental experience
We are spiritual beings going through the human experience
Unknown</p>
</blockquote>]]></content><author><name>Michal Ferber</name><email>michal@michalferber.me</email></author><category term="Religion" /><category term="Theology" /><category term="God" /><summary type="html"><![CDATA[Or at least my take on it.]]></summary></entry><entry><title type="html">Hello World!</title><link href="http://localhost:4000/blog/hello-world" rel="alternate" type="text/html" title="Hello World!" /><published>2024-07-23T00:00:00-04:00</published><updated>2024-07-23T00:00:00-04:00</updated><id>http://localhost:4000/blog/hello-world</id><content type="html" xml:base="http://localhost:4000/blog/hello-world"><![CDATA[<p><img src="/assets/img/hello-world.jpg" alt="Hello World!" /></p>

<p>As a tech enthusiast, I couldn’t resist diving into the collaboration between Proton and Standard Notes. Having tried almost every other note-taking app, including Joplin, I appreciate the simplicity and elegance of a clean text editor, especially when it supports Markdown.</p>

<p>After downloading and installing Standard Notes on my Mac, I stumbled upon Listed—a free tool integrated with Standard Notes. Naturally, I had to give it a shot. And so, here I am.<script src="https://gist.github.com/3c466bc3c32c4ae5c9b36d1266b913d8.js"> </script></p>]]></content><author><name>Michal Ferber</name><email>michal@michalferber.me</email></author><category term="Programming" /><category term="Code" /><summary type="html"><![CDATA[Everyone has to have one of these right?]]></summary></entry><entry><title type="html">Microsoft 365 Certified: Teams Administrator Associate</title><link href="http://localhost:4000/blog/microsoft-365-certified-teams-administrator-associate" rel="alternate" type="text/html" title="Microsoft 365 Certified: Teams Administrator Associate" /><published>2023-03-22T00:00:00-04:00</published><updated>2023-03-22T00:00:00-04:00</updated><id>http://localhost:4000/blog/microsoft-365-certified-teams-administrator-associate</id><content type="html" xml:base="http://localhost:4000/blog/microsoft-365-certified-teams-administrator-associate"><![CDATA[<p><img class="d-block w-25" src="/assets/badges/microsoft-365-teams-administrator-associate.png" /></p>

<p><img src="/assets/certs/Microsoft_Certified_Professional_Certificate_4-pdf.jpg" alt="Microsoft 365 Certified: Teams Administrator Associate" /></p>

<p><a href="https://learn.microsoft.com/en-us/credentials/certifications/m365-teams-administrator-associate/">Microsoft Learn - Microsoft 365 Certified: Teams Administrator Associate</a></p>]]></content><author><name>Michal Ferber</name><email>michal@michalferber.me</email></author><category term="Microsoft Certification" /><category term="Teams" /><summary type="html"><![CDATA[MS-700: Managing Microsoft Teams.]]></summary></entry><entry><title type="html">The new Admin On-Demand feature in the Mosyle MDM</title><link href="http://localhost:4000/blog/how-to-the-new-admin-on-demand-feature-in-the-mosyle-mdm" rel="alternate" type="text/html" title="The new Admin On-Demand feature in the Mosyle MDM" /><published>2022-10-26T00:00:00-04:00</published><updated>2022-10-26T00:00:00-04:00</updated><id>http://localhost:4000/blog/how-to-the-new-admin-on-demand-feature-in-the-mosyle-mdm</id><content type="html" xml:base="http://localhost:4000/blog/how-to-the-new-admin-on-demand-feature-in-the-mosyle-mdm"><![CDATA[<p><img src="/assets/img/mosyle-admin-on-demand.png" alt="Mosyle Certified Administrator" /></p>

<p>A new feature in the Mosyle MDM is the ability to allow users to have admin permission only when they need it. In the past, you had to use a static password that the user knew or rotate the password and then give the password when the user asks for it.</p>

<p>To turn on the Admin On-Demand functionality, go to Security -&gt; Admin On-Demand -&gt; Settings. Add a new profile with the setting selections and assignments you prefer. That’s it.</p>

<p><img src="/assets/img/mosyle-admin-on-demand-admin.png" alt="Mosyle Admin Console" /></p>

<p>To activate, the user navigates to the Mosyle Self-Service app, clicks on Admin On-Demand, and makes the request.</p>

<div class="video">
  <iframe src="https://www.youtube.com/embed/bkIj3i2TUqI" frameborder="0" allowfullscreen=""></iframe>
</div>]]></content><author><name>Michal Ferber</name><email>michal@michalferber.me</email></author><category term="How To" /><category term="MDM" /><category term="Mosyle" /><summary type="html"><![CDATA[A How To Guide.]]></summary></entry><entry><title type="html">Mosyle Certified Admin</title><link href="http://localhost:4000/blog/mosyle-certified-admin" rel="alternate" type="text/html" title="Mosyle Certified Admin" /><published>2021-09-26T00:00:00-04:00</published><updated>2021-09-26T00:00:00-04:00</updated><id>http://localhost:4000/blog/mosyle-certified-admin</id><content type="html" xml:base="http://localhost:4000/blog/mosyle-certified-admin"><![CDATA[<p><img class="d-block w-50" src="/assets/badges/mosyle.png" /></p>

<p><img src="/assets/certs/2021-09-26_Mosyle_certificate_628-A4F.jpg" alt="Mosyle Certified Admin" /></p>

<p><a href="https://business.mosyle.com/">Mosyle Business - MDM</a></p>]]></content><author><name>Michal Ferber</name><email>michal@michalferber.me</email></author><category term="MDM" /><category term="Mobile Device Manager" /><category term="Endpoint Management" /><category term="Apple" /><category term="iOS" /><category term="macOS" /><summary type="html"><![CDATA[This certificate deems the recipient competent and skilled in Mosyle Business MDM. He has completed certification and become a Mosyle Certified Admin.]]></summary></entry></feed>